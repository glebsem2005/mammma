import * as Contacts from 'expo-contacts';
import { Alert, Platform, PermissionsAndroid } from 'react-native';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../firebase.config';
import AsyncStorage from '@react-native-async-storage/async-storage';

export class ContactsService {
  
  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
   */
  static async requestPermission() {
    try {
      if (Platform.OS === 'android') {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_CONTACTS,
          {
            title: '–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º',
            message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π',
            buttonPositive: '–†–∞–∑—Ä–µ—à–∏—Ç—å',
            buttonNegative: '–û—Ç–º–µ–Ω–∞',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        const { status } = await Contacts.requestPermissionsAsync();
        return status === 'granted';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      return false;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  static async importContacts() {
    try {
      console.log('üì± –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...');
      
      const hasPermission = await this.requestPermission();
      if (!hasPermission) {
        throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º');
      }

      const { data } = await Contacts.getContactsAsync({
        fields: [
          Contacts.Fields.Name,
          Contacts.Fields.PhoneNumbers,
        ],
      });

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${data.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ`);
      
      const processedContacts = this.processContacts(data);
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedContacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      await this.saveContactsToLocal(processedContacts);
      
      // –ò—â–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const syncedContacts = await this.syncWithServer(processedContacts);
      
      return syncedContacts;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã: ' + error.message);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  static processContacts(rawContacts) {
    const processedContacts = [];

    rawContacts.forEach(contact => {
      if (!contact.phoneNumbers || contact.phoneNumbers.length === 0) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤
      }

      contact.phoneNumbers.forEach((phoneNumber, index) => {
        const cleanNumber = this.cleanPhoneNumber(phoneNumber.number);
        if (cleanNumber) {
          processedContacts.push({
            id: `${contact.id}_${index}`,
            name: contact.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
            phoneNumber: cleanNumber,
            originalNumber: phoneNumber.number,
            contactId: contact.id,
            isRegistered: false,
            userId: null,
          });
        }
      });
    });

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É
    const uniqueContacts = this.removeDuplicateNumbers(processedContacts);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    return uniqueContacts.sort((a, b) => 
      a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' })
    );
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  static cleanPhoneNumber(phoneNumber) {
    if (!phoneNumber) return null;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let cleaned = phoneNumber.replace(/[^\d+]/g, '');

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    if (cleaned.startsWith('8')) {
      cleaned = '+7' + cleaned.substring(1);
    } else if (cleaned.startsWith('7') && cleaned.length === 11) {
      cleaned = '+' + cleaned;
    } else if (cleaned.startsWith('9') && cleaned.length === 10) {
      cleaned = '+7' + cleaned;
    } else if (!cleaned.startsWith('+')) {
      if (cleaned.length === 10) {
        cleaned = '+7' + cleaned;
      } else if (cleaned.length === 11 && cleaned.startsWith('7')) {
        cleaned = '+' + cleaned;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (this.isValidPhoneNumber(cleaned)) {
      return cleaned;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
   */
  static isValidPhoneNumber(phoneNumber) {
    const phoneRegex = /^\+\d{7,15}$/;
    return phoneRegex.test(phoneNumber);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É
   */
  static removeDuplicateNumbers(contacts) {
    const seen = new Map();
    const result = [];

    contacts.forEach(contact => {
      if (!seen.has(contact.phoneNumber)) {
        seen.set(contact.phoneNumber, true);
        result.push(contact);
      }
    });

    return result;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º Firebase
   */
  static async syncWithServer(contacts) {
    try {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
      
      const phoneNumbers = contacts.map(contact => contact.phoneNumber);
      const registeredUsers = [];
      
      // Firebase –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç IN —Å –±–æ–ª–µ–µ —á–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      const chunks = [];
      for (let i = 0; i < phoneNumbers.length; i += 10) {
        chunks.push(phoneNumbers.slice(i, i + 10));
      }
      
      for (const chunk of chunks) {
        const q = query(
          collection(db, 'users'), 
          where('phoneNumber', 'in', chunk)
        );
        const querySnapshot = await getDocs(q);
        
        querySnapshot.forEach((doc) => {
          registeredUsers.push({
            userId: doc.id,
            ...doc.data()
          });
        });
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${registeredUsers.length} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const syncedContacts = contacts.map(contact => {
        const registered = registeredUsers.find(
          user => user.phoneNumber === contact.phoneNumber
        );

        return {
          ...contact,
          isRegistered: !!registered,
          userId: registered?.userId || null,
          serverName: registered?.name || null,
          avatarUrl: registered?.avatarUrl || null,
        };
      });

      await this.saveContactsToLocal(syncedContacts);
      return syncedContacts;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      return contacts.map(c => ({ ...c, isRegistered: false }));
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
   */
  static async saveContactsToLocal(contacts) {
    try {
      await AsyncStorage.setItem('importedContacts', JSON.stringify(contacts));
      console.log('üíæ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  static async loadContactsFromLocal() {
    try {
      const contactsJson = await AsyncStorage.getItem('importedContacts');
      if (contactsJson) {
        const contacts = JSON.parse(contactsJson);
        console.log(`üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${contacts.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
        return contacts;
      }
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
   */
  static async searchContacts(query) {
    try {
      const contacts = await this.loadContactsFromLocal();
      const lowercaseQuery = query.toLowerCase();
      
      return contacts.filter(contact => 
        contact.name.toLowerCase().includes(lowercaseQuery) ||
        contact.phoneNumber.includes(query)
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatPhoneNumber(phoneNumber) {
    if (!phoneNumber) return '';

    if (phoneNumber.startsWith('+7')) {
      const number = phoneNumber.substring(2);
      if (number.length === 10) {
        return `+7 (${number.substring(0, 3)}) ${number.substring(3, 6)}-${number.substring(6, 8)}-${number.substring(8)}`;
      }
    }

    return phoneNumber;
  }
}import * as Contacts from 'expo-contacts';
import { Alert } from 'react-native';

export class ContactsService {
  static async requestPermission() {
    try {
      const { status } = await Contacts.requestPermissionsAsync();
      return status === 'granted';
    } catch (error) {
      console.error('Error requesting contacts permission:', error);
      return false;
    }
  }

  static async importContacts() {
    try {
      const hasPermission = await this.requestPermission();
      if (!hasPermission) {
        Alert.alert(
          '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
          '–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º'
        );
        return [];
      }

      // –†–µ–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const { data } = await Contacts.getContactsAsync({
        fields: [
          Contacts.Fields.Name,
          Contacts.Fields.PhoneNumbers,
          Contacts.Fields.Image,
        ],
      });

      const processedContacts = this.processContacts(data);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
      await this.saveContactsToLocal(processedContacts);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const syncedContacts = await this.syncWithServer(processedContacts);
      
      return syncedContacts;
    } catch (error) {
      console.error('Error importing contacts:', error);
      throw new Error('Failed to import contacts');
    }
  }

  static processContacts(rawContacts) {
    const processedContacts = [];

    rawContacts.forEach(contact => {
      if (!contact.phoneNumbers || contact.phoneNumbers.length === 0) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤
      }

      contact.phoneNumbers.forEach(phoneNumber => {
        const cleanNumber = this.cleanPhoneNumber(phoneNumber.number);
        if (cleanNumber) {
          processedContacts.push({
            id: `${contact.id}_${phoneNumber.id}`,
            name: contact.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
            phoneNumber: cleanNumber,
            originalNumber: phoneNumber.number,
            imageUri: contact.imageAvailable ? contact.image?.uri : null,
            contactId: contact.id,
          });
        }
      });
    });

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const uniqueContacts = this.removeDuplicateNumbers(processedContacts);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    return uniqueContacts.sort((a, b) => 
      a.name.localeCompare(b.name, 'ru', { sensitivity: 'base' })
    );
  }

  static cleanPhoneNumber(phoneNumber) {
    if (!phoneNumber) return null;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let cleaned = phoneNumber.replace(/[^\d+]/g, '');

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = cleaned.replace(/\s/g, '');

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    if (cleaned.startsWith('8')) {
      cleaned = '+7' + cleaned.substring(1);
    } else if (cleaned.startsWith('7') && cleaned.length === 11) {
      cleaned = '+' + cleaned;
    } else if (cleaned.startsWith('9') && cleaned.length === 10) {
      cleaned = '+7' + cleaned;
    } else if (!cleaned.startsWith('+')) {
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
      if (cleaned.length === 10) {
        cleaned = '+7' + cleaned;
      } else if (cleaned.length === 11 && cleaned.startsWith('7')) {
        cleaned = '+' + cleaned;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    if (this.isValidPhoneNumber(cleaned)) {
      return cleaned;
    }

    return null;
  }

  static isValidPhoneNumber(phoneNumber) {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const phoneRegex = /^\+\d{7,15}$/;
    return phoneRegex.test(phoneNumber);
  }

  static removeDuplicateNumbers(contacts) {
    const seen = new Map();
    const result = [];

    contacts.forEach(contact => {
      const key = contact.phoneNumber;
      if (!seen.has(key)) {
        seen.set(key, true);
        result.push(contact);
      }
    });

    return result;
  }

  static async syncWithServer(contacts) {
    try {
      const { collection, query, where, getDocs } = await import('firebase/firestore');
      const { db } = await import('../firebase.config');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const phoneNumbers = contacts.map(contact => contact.phoneNumber);
      
      // –ò—â–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Firebase
      const usersRef = collection(db, 'users');
      const registeredUsers = [];
      
      // Firebase –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç IN –∑–∞–ø—Ä–æ—Å—ã —Å –±–æ–ª–µ–µ —á–µ–º 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ chunk'–∏ –ø–æ 10
      const chunks = [];
      for (let i = 0; i < phoneNumbers.length; i += 10) {
        chunks.push(phoneNumbers.slice(i, i + 10));
      }
      
      for (const chunk of chunks) {
        const q = query(usersRef, where('phoneNumber', 'in', chunk));
        const querySnapshot = await getDocs(q);
        
        querySnapshot.forEach((doc) => {
          registeredUsers.push({
            userId: doc.id,
            ...doc.data()
          });
        });
      }

      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
      const syncedContacts = contacts.map(contact => {
        const registeredUser = registeredUsers.find(
          user => user.phoneNumber === contact.phoneNumber
        );

        return {
          ...contact,
          isRegistered: !!registeredUser,
          userId: registeredUser?.userId || null,
          serverName: registeredUser?.name || null,
          avatarUrl: registeredUser?.avatarUrl || null,
          description: registeredUser?.description || null,
          interests: registeredUser?.interests || [],
        };
      });

      return syncedContacts;
    } catch (error) {
      console.error('Error syncing contacts with server:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return contacts.map(contact => ({
        ...contact,
        isRegistered: false,
        userId: null,
        serverName: null,
        avatarUrl: null,
      }));
    }
  }

  static async findUsersByPhoneNumbers(phoneNumbers) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
      // –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      
      const demoUsers = [
        {
          phoneNumber: '+79123456789',
          userId: 'user1',
          name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          avatarUrl: null,
          description: '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å',
          interests: ['–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'],
          isOnline: true,
        },
        {
          phoneNumber: '+79987654321',
          userId: 'user2',
          name: '–ú–∏—Ö–∞–∏–ª –°–∏–¥–æ—Ä–æ–≤',
          avatarUrl: null,
          description: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
          interests: ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ò–≥—Ä—ã'],
          isOnline: false,
        },
      ];

      return demoUsers.filter(user => 
        phoneNumbers.includes(user.phoneNumber)
      );
    } catch (error) {
      console.error('Error finding users by phone numbers:', error);
      throw new Error('Failed to find users');
    }
  }

  static formatPhoneNumber(phoneNumber) {
    if (!phoneNumber) return '';

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (phoneNumber.startsWith('+7')) {
      const number = phoneNumber.substring(2);
      if (number.length === 10) {
        return `+7 (${number.substring(0, 3)}) ${number.substring(3, 6)}-${number.substring(6, 8)}-${number.substring(8)}`;
      }
    }

    return phoneNumber;
  }

  static async saveContactsToLocal(contacts) {
    try {
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      await AsyncStorage.setItem('importedContacts', JSON.stringify(contacts));
    } catch (error) {
      console.error('Error saving contacts to local storage:', error);
    }
  }

  static async loadContactsFromLocal() {
    try {
      const AsyncStorage = require('@react-native-async-storage/async-storage').default;
      const contactsJson = await AsyncStorage.getItem('importedContacts');
      if (contactsJson) {
        return JSON.parse(contactsJson);
      }
      return [];
    } catch (error) {
      console.error('Error loading contacts from local storage:', error);
      return [];
    }
  }

  static async addContact(contact) {
    try {
      const contacts = await this.loadContactsFromLocal();
      const updatedContacts = [...contacts, contact];
      await this.saveContactsToLocal(updatedContacts);
      return updatedContacts;
    } catch (error) {
      console.error('Error adding contact:', error);
      throw new Error('Failed to add contact');
    }
  }

  static async removeContact(contactId) {
    try {
      const contacts = await this.loadContactsFromLocal();
      const updatedContacts = contacts.filter(c => c.id !== contactId);
      await this.saveContactsToLocal(updatedContacts);
      return updatedContacts;
    } catch (error) {
      console.error('Error removing contact:', error);
      throw new Error('Failed to remove contact');
    }
  }

  static async searchContacts(query) {
    try {
      const contacts = await this.loadContactsFromLocal();
      const lowercaseQuery = query.toLowerCase();
      
      return contacts.filter(contact => 
        contact.name.toLowerCase().includes(lowercaseQuery) ||
        contact.phoneNumber.includes(query)
      );
    } catch (error) {
      console.error('Error searching contacts:', error);
      return [];
    }
  }
}
