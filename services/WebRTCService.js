import { RTCPeerConnection, RTCIceCandidate, RTCSessionDescription, mediaDevices } from 'react-native-webrtc';
import io from 'socket.io-client';

class WebRTCService {
  constructor() {
    this.socket = null;
    this.peerConnection = null;
    this.localStream = null;
    this.remoteStream = null;
    this.isInitiator = false;
    this.currentRoomId = null;
    this.callType = null;
    this.userId = null;
    
    // Callbacks
    this.onRemoteStream = null;
    this.onLocalStream = null;
    this.onCallEnded = null;
    this.onIncomingCall = null;
    this.onCallAccepted = null;
    this.onCallDeclined = null;
    this.onError = null;
    this.onCallInitiated = null;
    
    // ICE —Å–µ—Ä–≤–µ—Ä—ã
    this.iceServers = [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' },
    ];
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
   */
  async initialize(serverUrl, userId) {
    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É WebRTC...');
      
      this.userId = userId;
      this.socket = io(serverUrl, {
        transports: ['websocket']
      });

      this.setupSocketListeners();
      
      return new Promise((resolve, reject) => {
        this.socket.on('connect', () => {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É WebRTC');
          
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          this.socket.emit('register', { userId: this.userId });
          resolve();
        });

        this.socket.on('connect_error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
          reject(error);
        });
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebRTC:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
   */
  setupSocketListeners() {
    // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
    this.socket.on('incoming_call', (data) => {
      console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫:', data);
      this.currentRoomId = data.roomId;
      this.callType = data.callType;
      this.isInitiator = false;
      
      if (this.onIncomingCall) {
        this.onIncomingCall(data);
      }
    });

    // –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç
    this.socket.on('call_accepted', async (data) => {
      console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç:', data);
      try {
        if (data.answer) {
          const answer = new RTCSessionDescription(data.answer);
          await this.peerConnection.setRemoteDescription(answer);
        }
        
        if (this.onCallAccepted) {
          this.onCallAccepted(data);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
      }
    });

    // –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω
    this.socket.on('call_declined', (data) => {
      console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω:', data);
      this.cleanup();
      
      if (this.onCallDeclined) {
        this.onCallDeclined(data);
      }
    });

    // –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
    this.socket.on('call_ended', (data) => {
      console.log('üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', data);
      this.cleanup();
      
      if (this.onCallEnded) {
        this.onCallEnded(data);
      }
    });

    // –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω
    this.socket.on('call_initiated', (data) => {
      console.log('üìû –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data);
      if (this.onCallInitiated) {
        this.onCallInitiated(data);
      }
    });

    // ICE –∫–∞–Ω–¥–∏–¥–∞—Ç
    this.socket.on('ice_candidate', async (data) => {
      console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', data);
      try {
        if (this.peerConnection) {
          const candidate = new RTCIceCandidate(data.candidate);
          await this.peerConnection.addIceCandidate(candidate);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
      }
    });

    // –û–±–º–µ–Ω SDP
    this.socket.on('sdp_exchange', async (data) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω SDP:', data);
      try {
        if (this.peerConnection) {
          const sessionDescription = new RTCSessionDescription({
            sdp: data.sdp,
            type: data.type
          });
          await this.peerConnection.setRemoteDescription(sessionDescription);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP:', error);
      }
    });

    // –û—à–∏–±–∫–∏ –∑–≤–æ–Ω–∫–∞
    this.socket.on('call_error', (data) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞:', data);
      this.cleanup();
      
      if (this.onError) {
        this.onError(data);
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ peer connection
   */
  createPeerConnection() {
    try {
      console.log('üîó –°–æ–∑–¥–∞–µ–º peer connection...');
      
      this.peerConnection = new RTCPeerConnection({
        iceServers: this.iceServers,
        iceCandidatePoolSize: 10,
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      this.peerConnection.onicecandidate = (event) => {
        if (event.candidate && this.currentRoomId) {
          console.log('üßä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
          this.socket.emit('ice_candidate', {
            roomId: this.currentRoomId,
            candidate: event.candidate
          });
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      this.peerConnection.onaddstream = (event) => {
        console.log('üì∫ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        this.remoteStream = event.stream;
        
        if (this.onRemoteStream) {
          this.onRemoteStream(event.stream);
        }
      };

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.peerConnection.oniceconnectionstatechange = () => {
        console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ ICE:', this.peerConnection.iceConnectionState);
        
        if (this.peerConnection.iceConnectionState === 'disconnected' ||
            this.peerConnection.iceConnectionState === 'failed') {
          this.endCall();
        }
      };
      
      console.log('‚úÖ Peer connection —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è peer connection:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
   */
  async getLocalStream(isVideoCall = false) {
    try {
      console.log(`üìπ –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (–≤–∏–¥–µ–æ: ${isVideoCall})`);
      
      const constraints = {
        audio: true,
        video: isVideoCall ? {
          mandatory: {
            minWidth: 320,
            minHeight: 240,
            minFrameRate: 30,
          },
          facingMode: 'user',
        } : false,
      };

      const stream = await mediaDevices.getUserMedia(constraints);
      this.localStream = stream;
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω');
      
      if (this.onLocalStream) {
        this.onLocalStream(stream);
      }
      
      return stream;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
   */
  async initiateCall(targetUserId, callType = 'audio') {
    try {
      console.log(`üìû –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º ${callType} –∑–≤–æ–Ω–æ–∫ –∫ ${targetUserId}`);
      
      this.isInitiator = true;
      this.callType = callType;
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      await this.getLocalStream(callType === 'video');
      
      // –°–æ–∑–¥–∞–µ–º peer connection
      this.createPeerConnection();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      if (this.localStream) {
        this.peerConnection.addStream(this.localStream);
      }
      
      // –°–æ–∑–¥–∞–µ–º offer
      const offer = await this.peerConnection.createOffer();
      await this.peerConnection.setLocalDescription(offer);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
      this.socket.emit('call_user', {
        targetUserId: targetUserId,
        callType: callType,
        offer: offer,
        callerId: this.userId
      });
      
      console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
      this.cleanup();
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  async acceptCall(roomId) {
    try {
      console.log(`‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
      
      this.currentRoomId = roomId;
      
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      await this.getLocalStream(this.callType === 'video');
      
      // –°–æ–∑–¥–∞–µ–º peer connection
      this.createPeerConnection();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
      if (this.localStream) {
        this.peerConnection.addStream(this.localStream);
      }
      
      // –°–æ–∑–¥–∞–µ–º answer
      const answer = await this.peerConnection.createAnswer();
      await this.peerConnection.setLocalDescription(answer);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      this.socket.emit('accept_call', {
        roomId: roomId,
        answer: answer
      });
      
      console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
      this.cleanup();
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  declineCall(roomId, reason = 'declined') {
    console.log(`‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    
    this.socket.emit('decline_call', {
      roomId: roomId,
      reason: reason
    });
    this.cleanup();
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  endCall() {
    console.log('üì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
    
    if (this.currentRoomId) {
      this.socket.emit('end_call', {
        roomId: this.currentRoomId
      });
    }
    this.cleanup();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
   */
  toggleMicrophone() {
    if (this.localStream) {
      const audioTracks = this.localStream.getAudioTracks();
      if (audioTracks.length > 0) {
        const enabled = !audioTracks[0].enabled;
        audioTracks[0].enabled = enabled;
        console.log(`üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
        return enabled;
      }
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
   */
  toggleCamera() {
    if (this.localStream) {
      const videoTracks = this.localStream.getVideoTracks();
      if (videoTracks.length > 0) {
        const enabled = !videoTracks[0].enabled;
        videoTracks[0].enabled = enabled;
        console.log(`üìπ –ö–∞–º–µ—Ä–∞ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
        return enabled;
      }
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–ø–µ—Ä–µ–¥–Ω—è—è/–∑–∞–¥–Ω—è—è)
   */
  switchCamera() {
    if (this.localStream) {
      const videoTracks = this.localStream.getVideoTracks();
      if (videoTracks.length > 0) {
        videoTracks[0]._switchCamera();
        console.log('üîÑ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã WebRTC');
    
    if (this.localStream) {
      this.localStream.getTracks().forEach(track => track.stop());
      this.localStream = null;
    }
    
    if (this.peerConnection) {
      this.peerConnection.close();
      this.peerConnection = null;
    }
    
    this.remoteStream = null;
    this.currentRoomId = null;
    this.callType = null;
    this.isInitiator = false;
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect() {
    console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ WebRTC');
    
    this.cleanup();
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }
}

export default new WebRTCService();
