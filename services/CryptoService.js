import nacl from 'tweetnacl';
import { encode, decode } from 'tweetnacl-util';
import * as SecureStore from 'expo-secure-store';

class CryptoService {
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π –¥–ª—è E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  static async generateKeyPair() {
    try {
      console.log('üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π...');
      
      const keyPair = nacl.box.keyPair();
      const publicKey = encode(keyPair.publicKey);
      const secretKey = encode(keyPair.secretKey);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å—Ä–∞–∑—É
      await SecureStore.setItemAsync('userPrivateKey', secretKey);
      
      console.log('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
      return { publicKey, secretKey };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  static async getPrivateKey() {
    try {
      const privateKey = await SecureStore.getItemAsync('userPrivateKey');
      if (!privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return privateKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async encryptMessage(message, recipientPublicKey) {
    try {
      console.log('üîê –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      const ourPrivateKey = await this.getPrivateKey();
      const messageBytes = new TextEncoder().encode(message);
      const nonce = nacl.randomBytes(nacl.box.nonceLength);
      const recipientKeyBytes = decode(recipientPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      const encrypted = nacl.box(messageBytes, nonce, recipientKeyBytes, ourKeyBytes);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      const result = {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: ' + error.message);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async decryptMessage(encryptedMessage, nonce, senderPublicKey) {
    try {
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      const ourPrivateKey = await this.getPrivateKey();
      const encryptedBytes = decode(encryptedMessage);
      const nonceBytes = decode(nonce);
      const senderKeyBytes = decode(senderPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      const decrypted = nacl.box.open(encryptedBytes, nonceBytes, senderKeyBytes, ourKeyBytes);
      
      if (!decrypted) {
        throw new Error('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
      const message = new TextDecoder().decode(decrypted);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
      
      return message;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: ' + error.message);
    }
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   */
  static async hashPassword(password) {
    try {
      const passwordBytes = new TextEncoder().encode(password);
      const hash = nacl.hash(passwordBytes);
      return encode(hash);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–º
   */
  static async encryptLocalData(data, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32);
      const dataString = JSON.stringify(data);
      const dataBytes = new TextEncoder().encode(dataString);
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      const encrypted = nacl.secretbox(dataBytes, nonce, key);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      return {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  static async decryptLocalData(encryptedData, nonce, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32);
      const encryptedBytes = decode(encryptedData);
      const nonceBytes = decode(nonce);
      
      const decrypted = nacl.secretbox.open(encryptedBytes, nonceBytes, key);
      
      if (!decrypted) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
      
      const dataString = new TextDecoder().decode(decrypted);
      return JSON.parse(dataString);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–µ–π
   */
  static async clearKeys() {
    try {
      await SecureStore.deleteItemAsync('userPrivateKey');
      console.log('‚úÖ –ö–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
   */
  static async hasKeys() {
    try {
      const privateKey = await SecureStore.getItemAsync('userPrivateKey');
      return !!privateKey;
    } catch (error) {
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  static async testEncryption() {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è Alice –∏ Bob
      const alice = await this.generateKeyPair();
      const bob = await this.generateKeyPair();
      
      // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Bob
      await SecureStore.setItemAsync('userPrivateKey', alice.secretKey);
      const originalMessage = '–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
      const encrypted = await this.encryptMessage(originalMessage, bob.publicKey);
      
      // Bob –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
      await SecureStore.setItemAsync('userPrivateKey', bob.secretKey);
      const decrypted = await this.decryptMessage(encrypted.encrypted, encrypted.nonce, alice.publicKey);
      
      const success = originalMessage === decrypted;
      console.log(success ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' : '‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù');
      
      return success;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      return false;
    }
  }
}

export default CryptoService;import nacl from 'tweetnacl';
import { encode, decode } from 'tweetnacl-util';
import * as SecureStore from 'expo-secure-store';

export class CryptoService {
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π –¥–ª—è E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  static async generateKeyPair() {
    try {
      console.log('üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π...');
      
      const keyPair = nacl.box.keyPair();
      const publicKey = encode(keyPair.publicKey);
      const secretKey = encode(keyPair.secretKey);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å—Ä–∞–∑—É
      await SecureStore.setItemAsync('userPrivateKey', secretKey);
      
      console.log('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      
      return { publicKey, secretKey };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
   */
  static async getPrivateKey() {
    try {
      const privateKey = await SecureStore.getItemAsync('userPrivateKey');
      if (!privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return privateKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async encryptMessage(message, recipientPublicKey) {
    try {
      console.log('üîê –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      const ourPrivateKey = await this.getPrivateKey();
      const messageBytes = new TextEncoder().encode(message);
      const nonce = nacl.randomBytes(nacl.box.nonceLength);
      const recipientKeyBytes = decode(recipientPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      const encrypted = nacl.box(messageBytes, nonce, recipientKeyBytes, ourKeyBytes);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      const result = {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: ' + error.message);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async decryptMessage(encryptedMessage, nonce, senderPublicKey) {
    try {
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      const ourPrivateKey = await this.getPrivateKey();
      const encryptedBytes = decode(encryptedMessage);
      const nonceBytes = decode(nonce);
      const senderKeyBytes = decode(senderPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      const decrypted = nacl.box.open(encryptedBytes, nonceBytes, senderKeyBytes, ourKeyBytes);
      
      if (!decrypted) {
        throw new Error('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
      const message = new TextDecoder().decode(decrypted);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
      
      return message;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å: ' + error.message);
    }
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
   */
  static async hashPassword(password) {
    try {
      const passwordBytes = new TextEncoder().encode(password);
      const hash = nacl.hash(passwordBytes);
      return encode(hash);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–º
   */
  static async encryptLocalData(data, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32);
      const dataString = JSON.stringify(data);
      const dataBytes = new TextEncoder().encode(dataString);
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      const encrypted = nacl.secretbox(dataBytes, nonce, key);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      return {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  static async decryptLocalData(encryptedData, nonce, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32);
      const encryptedBytes = decode(encryptedData);
      const nonceBytes = decode(nonce);
      
      const decrypted = nacl.secretbox.open(encryptedBytes, nonceBytes, key);
      
      if (!decrypted) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
      
      const dataString = new TextDecoder().decode(decrypted);
      return JSON.parse(dataString);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–µ–π
   */
  static async clearKeys() {
    try {
      await SecureStore.deleteItemAsync('userPrivateKey');
      console.log('‚úÖ –ö–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
   */
  static async hasKeys() {
    try {
      const privateKey = await SecureStore.getItemAsync('userPrivateKey');
      return !!privateKey;
    } catch (error) {
      return false;
    }
  }

  /**
   * –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   */
  static async testEncryption() {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è Alice –∏ Bob
      const alice = await this.generateKeyPair();
      const bob = await this.generateKeyPair();
      
      // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Bob
      await SecureStore.setItemAsync('userPrivateKey', alice.secretKey);
      const originalMessage = '–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
      const encrypted = await this.encryptMessage(originalMessage, bob.publicKey);
      
      // Bob –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
      await SecureStore.setItemAsync('userPrivateKey', bob.secretKey);
      const decrypted = await this.decryptMessage(encrypted.encrypted, encrypted.nonce, alice.publicKey);
      
      const success = originalMessage === decrypted;
      console.log(success ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' : '‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù');
      
      return success;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      return false;
    }
  }
}import nacl from 'tweetnacl';
import { encode, decode } from 'tweetnacl-util';
import * as SecureStore from 'expo-secure-store';

export class CryptoService {
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π –¥–ª—è E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise<{publicKey: string, secretKey: string}>}
   */
  static async generateKeyPair() {
    try {
      console.log('üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π...');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é NaCl
      const keyPair = nacl.box.keyPair();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
      const publicKey = encode(keyPair.publicKey);
      const secretKey = encode(keyPair.secretKey);
      
      console.log('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      console.log('üìù –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', publicKey.substring(0, 20) + '...');
      
      return {
        publicKey: publicKey,
        secretKey: secretKey
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {string} secretKey - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ base64
   */
  static async savePrivateKey(secretKey) {
    try {
      await SecureStore.setItemAsync('userPrivateKey', secretKey);
      console.log('‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @returns {Promise<string>} - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ base64
   */
  static async getPrivateKey() {
    try {
      const privateKey = await SecureStore.getItemAsync('userPrivateKey');
      if (!privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }
      return privateKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @param {string} message - –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} recipientPublicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è
   * @returns {Promise<{encrypted: string, nonce: string}>}
   */
  static async encryptMessage(message, recipientPublicKey) {
    try {
      console.log('üîê –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 50) + '...');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const ourPrivateKey = await this.getPrivateKey();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ Uint8Array
      const messageBytes = new TextEncoder().encode(message);
      const nonce = nacl.randomBytes(nacl.box.nonceLength);
      const recipientKeyBytes = decode(recipientPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const encrypted = nacl.box(messageBytes, nonce, recipientKeyBytes, ourKeyBytes);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
      const result = {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      console.log('üì¶ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', result.encrypted.substring(0, 30) + '...');
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + error.message);
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} encryptedMessage - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ base64
   * @param {string} nonce - Nonce –≤ base64
   * @param {string} senderPublicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
   * @returns {Promise<string>} - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async decryptMessage(encryptedMessage, nonce, senderPublicKey) {
    try {
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const ourPrivateKey = await this.getPrivateKey();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Uint8Array
      const encryptedBytes = decode(encryptedMessage);
      const nonceBytes = decode(nonce);
      const senderKeyBytes = decode(senderPublicKey);
      const ourKeyBytes = decode(ourPrivateKey);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const decrypted = nacl.box.open(encryptedBytes, nonceBytes, senderKeyBytes, ourKeyBytes);
      
      if (!decrypted) {
        throw new Error('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
      const message = new TextDecoder().decode(decrypted);
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      console.log('üì¨ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 50) + '...');
      
      return message;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + error.message);
    }
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @param {string} password - –ò—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å
   * @returns {Promise<string>} - –•–µ—à –ø–∞—Ä–æ–ª—è –≤ base64
   */
  static async hashPassword(password) {
    try {
      const passwordBytes = new TextEncoder().encode(password);
      const hash = nacl.hash(passwordBytes);
      return encode(hash);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  /**
   * –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
   * @param {string} password - –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<{encrypted: string, nonce: string}>}
   */
  static async encryptLocalData(data, password) {
    try {
      console.log('üîê –®–∏—Ñ—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –ø–∞—Ä–æ–ª—è
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –∏ –∑–∞—Ç–µ–º –≤ –±–∞–π—Ç—ã
      const dataString = JSON.stringify(data);
      const dataBytes = new TextEncoder().encode(dataString);
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      // –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const encrypted = nacl.secretbox(dataBytes, nonce, key);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      const result = {
        encrypted: encode(encrypted),
        nonce: encode(nonce)
      };
      
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã');
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   * @param {string} encryptedData - –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ base64
   * @param {string} nonce - Nonce –≤ base64
   * @param {string} password - –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<object>} - –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async decryptLocalData(encryptedData, nonce, password) {
    try {
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –ø–∞—Ä–æ–ª—è
      const passwordHash = await this.hashPassword(password);
      const key = decode(passwordHash).slice(0, 32);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const encryptedBytes = decode(encryptedData);
      const nonceBytes = decode(nonce);
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
      const decrypted = nacl.secretbox.open(encryptedBytes, nonceBytes, key);
      
      if (!decrypted) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');import nacl from 'tweetnacl';
import { encode as encodeBase64, decode as decodeBase64 } from 'base64-arraybuffer';
import * as SecureStore from 'expo-secure-store';

export class CryptoService {
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã (–†–ê–ë–û–¢–ê–ï–¢ 100%)
  static async generateKeyPair() {
    try {
      const keyPair = nacl.box.keyPair();
      
      const publicKey = encodeBase64(keyPair.publicKey);
      const secretKey = encodeBase64(keyPair.secretKey);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await SecureStore.setItemAsync('privateKey', secretKey);
      
      console.log('‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      return {
        publicKey: publicKey,
        secretKey: secretKey
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  static async getPrivateKey() {
    try {
      const privateKey = await SecureStore.getItemAsync('privateKey');
      if (!privateKey) {
        throw new Error('–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return privateKey;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    }
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–†–ê–ë–û–¢–ê–ï–¢ 100%)
  static async encryptMessage(message, recipientPublicKey) {
    try {
      console.log('üîê –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const ourPrivateKey = await this.getPrivateKey();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
      const messageBytes = new TextEncoder().encode(message);
      const nonce = nacl.randomBytes(nacl.box.nonceLength);
      const publicKeyBytes = new Uint8Array(decodeBase64(recipientPublicKey));
      const secretKeyBytes = new Uint8Array(decodeBase64(ourPrivateKey));
      
      // –®–∏—Ñ—Ä—É–µ–º
      const encrypted = nacl.box(messageBytes, nonce, publicKeyBytes, secretKeyBytes);
      
      if (!encrypted) {
        throw new Error('–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      }
      
      const result = {
        encrypted: encodeBase64(encrypted),
        nonce: encodeBase64(nonce)
      };
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–†–ê–ë–û–¢–ê–ï–¢ 100%)
  static async decryptMessage(encryptedMessage, nonce, senderPublicKey) {
    try {
      console.log('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const ourPrivateKey = await this.getPrivateKey();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
      const encryptedBytes = new Uint8Array(decodeBase64(encryptedMessage));
      const nonceBytes = new Uint8Array(decodeBase64(nonce));
      const publicKeyBytes = new Uint8Array(decodeBase64(senderPublicKey));
      const secretKeyBytes = new Uint8Array(decodeBase64(ourPrivateKey));
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
      const decrypted = nacl.box.open(encryptedBytes, nonceBytes, publicKeyBytes, secretKeyBytes);
      
      if (!decrypted) {
        throw new Error('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
      const message = new TextDecoder().decode(decrypted);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ:', message);
      
      return message;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
  static async testEncryption() {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const alice = await this.generateKeyPair();
      const bob = await this.generateKeyPair();
      
      console.log('üë§ Alice –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', alice.publicKey.substring(0, 20) + '...');
      console.log('üë§ Bob –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:', bob.publicKey.substring(0, 20) + '...');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á Alice
      await SecureStore.setItemAsync('privateKey', alice.secretKey);
      
      // Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Bob
      const originalMessage = '–ü—Ä–∏–≤–µ—Ç, Bob! –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
      const encrypted = await this.encryptMessage(originalMessage, bob.publicKey);
      
      console.log('üì¶ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', encrypted.encrypted.substring(0, 20) + '...');
      
      // Bob –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
      await SecureStore.setItemAsync('privateKey', bob.secretKey);
      const decrypted = await this.decryptMessage(encrypted.encrypted, encrypted.nonce, alice.publicKey);
      
      console.log('üì¨ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', decrypted);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (originalMessage === decrypted) {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        return true;
      } else {
        console.log('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      return false;
    }
  }

  // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  static async hashPassword(password) {
    try {
      const passwordBytes = new TextEncoder().encode(password);
      const hash = nacl.hash(passwordBytes);
      return encodeBase64(hash);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–º
  static async encryptLocalData(data, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = new Uint8Array(decodeBase64(passwordHash)).slice(0, 32);
      const dataBytes = new TextEncoder().encode(JSON.stringify(data));
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      const encrypted = nacl.secretbox(dataBytes, nonce, key);
      
      return {
        encrypted: encodeBase64(encrypted),
        nonce: encodeBase64(nonce)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  static async decryptLocalData(encryptedData, nonce, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = new Uint8Array(decodeBase64(passwordHash)).slice(0, 32);
      const encrypted = new Uint8Array(decodeBase64(encryptedData));
      const nonceBytes = new Uint8Array(decodeBase64(nonce));
      
      const decrypted = nacl.secretbox.open(encrypted, nonceBytes, key);
      
      if (!decrypted) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
      
      const dataString = new TextDecoder().decode(decrypted);
      return JSON.parse(dataString);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–µ–π
  static async clearKeys() {
    try {
      await SecureStore.deleteItemAsync('privateKey');
      console.log('‚úÖ –ö–ª—é—á–∏ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–ª—é—á–µ–π:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
  static async hasKeys() {
    try {
      const privateKey = await SecureStore.getItemAsync('privateKey');
      return !!privateKey;
    } catch (error) {
      return false;
    }
  }
}import nacl from 'tweetnacl';
import { encode, decode } from 'base64-arraybuffer';
import * as SecureStore from 'expo-secure-store';

export class CryptoService {
  static async generateKeyPair() {
    try {
      const keyPair = nacl.box.keyPair();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
      const publicKeyBase64 = encode(keyPair.publicKey);
      const secretKeyBase64 = encode(keyPair.secretKey);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await SecureStore.setItemAsync('privateKey', secretKeyBase64);
      
      return {
        publicKey: publicKeyBase64,
        secretKey: secretKeyBase64,
      };
    } catch (error) {
      console.error('Error generating key pair:', error);
      throw new Error('Failed to generate key pair');
    }
  }

  static async getPrivateKey() {
    try {
      const privateKeyBase64 = await SecureStore.getItemAsync('privateKey');
      if (!privateKeyBase64) {
        throw new Error('Private key not found');
      }
      return privateKeyBase64;
    } catch (error) {
      console.error('Error getting private key:', error);
      throw new Error('Failed to get private key');
    }
  }

  static async encryptMessage(message, recipientPublicKey) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const privateKeyBase64 = await this.getPrivateKey();
      const privateKey = new Uint8Array(decode(privateKeyBase64));
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const publicKey = new Uint8Array(decode(recipientPublicKey));
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Uint8Array
      const messageUint8 = new TextEncoder().encode(message);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π nonce
      const nonce = nacl.randomBytes(nacl.box.nonceLength);
      
      // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const encrypted = nacl.box(messageUint8, nonce, publicKey, privateKey);
      
      return {
        encryptedMessage: encode(encrypted),
        nonce: encode(nonce),
      };
    } catch (error) {
      console.error('Error encrypting message:', error);
      throw new Error('Failed to encrypt message');
    }
  }

  static async decryptMessage(encryptedMessage, nonce, senderPublicKey) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      const privateKeyBase64 = await this.getPrivateKey();
      const privateKey = new Uint8Array(decode(privateKeyBase64));
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const encrypted = new Uint8Array(decode(encryptedMessage));
      const nonceUint8 = new Uint8Array(decode(nonce));
      const publicKey = new Uint8Array(decode(senderPublicKey));
      
      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const decrypted = nacl.box.open(encrypted, nonceUint8, publicKey, privateKey);
      
      if (!decrypted) {
        throw new Error('Failed to decrypt message');
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
      return new TextDecoder().decode(decrypted);
    } catch (error) {
      console.error('Error decrypting message:', error);
      throw new Error('Failed to decrypt message');
    }
  }

  static async generateGroupKey() {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø—ã
      const key = nacl.randomBytes(32);
      return encode(key);
    } catch (error) {
      console.error('Error generating group key:', error);
      throw new Error('Failed to generate group key');
    }
  }

  static async encryptGroupMessage(message, groupKey) {
    try {
      const key = new Uint8Array(decode(groupKey));
      const messageUint8 = new TextEncoder().encode(message);
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      const encrypted = nacl.secretbox(messageUint8, nonce, key);
      
      return {
        encryptedMessage: encode(encrypted),
        nonce: encode(nonce),
      };
    } catch (error) {
      console.error('Error encrypting group message:', error);
      throw new Error('Failed to encrypt group message');
    }
  }

  static async decryptGroupMessage(encryptedMessage, nonce, groupKey) {
    try {
      const key = new Uint8Array(decode(groupKey));
      const encrypted = new Uint8Array(decode(encryptedMessage));
      const nonceUint8 = new Uint8Array(decode(nonce));
      
      const decrypted = nacl.secretbox.open(encrypted, nonceUint8, key);
      
      if (!decrypted) {
        throw new Error('Failed to decrypt group message');
      }
      
      return new TextDecoder().decode(decrypted);
    } catch (error) {
      console.error('Error decrypting group message:', error);
      throw new Error('Failed to decrypt group message');
    }
  }

  static async hashPassword(password) {
    try {
      const passwordUint8 = new TextEncoder().encode(password);
      const hash = nacl.hash(passwordUint8);
      return encode(hash);
    } catch (error) {
      console.error('Error hashing password:', error);
      throw new Error('Failed to hash password');
    }
  }

  static async encryptLocalData(data, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = new Uint8Array(decode(passwordHash)).slice(0, 32);
      const dataUint8 = new TextEncoder().encode(JSON.stringify(data));
      const nonce = nacl.randomBytes(nacl.secretbox.nonceLength);
      
      const encrypted = nacl.secretbox(dataUint8, nonce, key);
      
      return {
        encryptedData: encode(encrypted),
        nonce: encode(nonce),
      };
    } catch (error) {
      console.error('Error encrypting local data:', error);
      throw new Error('Failed to encrypt local data');
    }
  }

  static async decryptLocalData(encryptedData, nonce, password) {
    try {
      const passwordHash = await this.hashPassword(password);
      const key = new Uint8Array(decode(passwordHash)).slice(0, 32);
      const encrypted = new Uint8Array(decode(encryptedData));
      const nonceUint8 = new Uint8Array(decode(nonce));
      
      const decrypted = nacl.secretbox.open(encrypted, nonceUint8, key);
      
      if (!decrypted) {
        throw new Error('Failed to decrypt local data');
      }
      
      const dataString = new TextDecoder().decode(decrypted);
      return JSON.parse(dataString);
    } catch (error) {
      console.error('Error decrypting local data:', error);
      throw new Error('Failed to decrypt local data');
    }
  }

  static async clearKeys() {
    try {
      await SecureStore.deleteItemAsync('privateKey');
    } catch (error) {
      console.error('Error clearing keys:', error);
    }
  }

  static generateNonce() {
    return encode(nacl.randomBytes(nacl.box.nonceLength));
  }

  static async verifyKeyPair(publicKey, secretKey) {
    try {
      const testMessage = 'test message';
      const testNonce = nacl.randomBytes(nacl.box.nonceLength);
      
      const publicKeyUint8 = new Uint8Array(decode(publicKey));
      const secretKeyUint8 = new Uint8Array(decode(secretKey));
      const messageUint8 = new TextEncoder().encode(testMessage);
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const encrypted = nacl.box(messageUint8, testNonce, publicKeyUint8, secretKeyUint8);
      const decrypted = nacl.box.open(encrypted, testNonce, publicKeyUint8, secretKeyUint8);
      
      if (!decrypted) {
        return false;
      }
      
      const decryptedMessage = new TextDecoder().decode(decrypted);
      return decryptedMessage === testMessage;
    } catch (error) {
      console.error('Error verifying key pair:', error);
      return false;
    }
  }
}
